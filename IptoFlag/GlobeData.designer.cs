#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IptoFlag
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="GlobeDatabase")]
	public partial class GlobeDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertContinent(Continent instance);
    partial void UpdateContinent(Continent instance);
    partial void DeleteContinent(Continent instance);
    partial void InsertCountry(Country instance);
    partial void UpdateCountry(Country instance);
    partial void DeleteCountry(Country instance);
    partial void InsertInfo(Info instance);
    partial void UpdateInfo(Info instance);
    partial void DeleteInfo(Info instance);
    #endregion
		
		public GlobeDataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["GlobeDatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public GlobeDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GlobeDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GlobeDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public GlobeDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Continent> Continents
		{
			get
			{
				return this.GetTable<Continent>();
			}
		}
		
		public System.Data.Linq.Table<Country> Countries
		{
			get
			{
				return this.GetTable<Country>();
			}
		}
		
		public System.Data.Linq.Table<Info> Infos
		{
			get
			{
				return this.GetTable<Info>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Continents")]
	public partial class Continent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdContinent;
		
		private string _Name;
		
		private EntitySet<Country> _Countries;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdContinentChanging(int value);
    partial void OnIdContinentChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Continent()
		{
			this._Countries = new EntitySet<Country>(new Action<Country>(this.attach_Countries), new Action<Country>(this.detach_Countries));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdContinent", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdContinent
		{
			get
			{
				return this._IdContinent;
			}
			set
			{
				if ((this._IdContinent != value))
				{
					this.OnIdContinentChanging(value);
					this.SendPropertyChanging();
					this._IdContinent = value;
					this.SendPropertyChanged("IdContinent");
					this.OnIdContinentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Continent_Country", Storage="_Countries", ThisKey="IdContinent", OtherKey="IdContinent")]
		public EntitySet<Country> Countries
		{
			get
			{
				return this._Countries;
			}
			set
			{
				this._Countries.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Countries(Country entity)
		{
			this.SendPropertyChanging();
			entity.Continent = this;
		}
		
		private void detach_Countries(Country entity)
		{
			this.SendPropertyChanging();
			entity.Continent = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Countries")]
	public partial class Country : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdCountry;
		
		private string _Name;
		
		private int _IdContinent;
		
		private EntitySet<Info> _Infos;
		
		private EntityRef<Continent> _Continent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdCountryChanging(int value);
    partial void OnIdCountryChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnIdContinentChanging(int value);
    partial void OnIdContinentChanged();
    #endregion
		
		public Country()
		{
			this._Infos = new EntitySet<Info>(new Action<Info>(this.attach_Infos), new Action<Info>(this.detach_Infos));
			this._Continent = default(EntityRef<Continent>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCountry", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdCountry
		{
			get
			{
				return this._IdCountry;
			}
			set
			{
				if ((this._IdCountry != value))
				{
					this.OnIdCountryChanging(value);
					this.SendPropertyChanging();
					this._IdCountry = value;
					this.SendPropertyChanged("IdCountry");
					this.OnIdCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(40) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdContinent", DbType="Int NOT NULL")]
		public int IdContinent
		{
			get
			{
				return this._IdContinent;
			}
			set
			{
				if ((this._IdContinent != value))
				{
					if (this._Continent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdContinentChanging(value);
					this.SendPropertyChanging();
					this._IdContinent = value;
					this.SendPropertyChanged("IdContinent");
					this.OnIdContinentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Info", Storage="_Infos", ThisKey="IdCountry", OtherKey="IdCountry")]
		public EntitySet<Info> Infos
		{
			get
			{
				return this._Infos;
			}
			set
			{
				this._Infos.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Continent_Country", Storage="_Continent", ThisKey="IdContinent", OtherKey="IdContinent", IsForeignKey=true)]
		public Continent Continent
		{
			get
			{
				return this._Continent.Entity;
			}
			set
			{
				Continent previousValue = this._Continent.Entity;
				if (((previousValue != value) 
							|| (this._Continent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Continent.Entity = null;
						previousValue.Countries.Remove(this);
					}
					this._Continent.Entity = value;
					if ((value != null))
					{
						value.Countries.Add(this);
						this._IdContinent = value.IdContinent;
					}
					else
					{
						this._IdContinent = default(int);
					}
					this.SendPropertyChanged("Continent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Infos(Info entity)
		{
			this.SendPropertyChanging();
			entity.Country = this;
		}
		
		private void detach_Infos(Info entity)
		{
			this.SendPropertyChanging();
			entity.Country = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Info")]
	public partial class Info : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IdInfo;
		
		private int _IdCountry;
		
		private string _Info1;
		
		private string _IP;
		
		private string _Location;
		
		private EntityRef<Country> _Country;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdInfoChanging(int value);
    partial void OnIdInfoChanged();
    partial void OnIdCountryChanging(int value);
    partial void OnIdCountryChanged();
    partial void OnInfo1Changing(string value);
    partial void OnInfo1Changed();
    partial void OnIPChanging(string value);
    partial void OnIPChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    #endregion
		
		public Info()
		{
			this._Country = default(EntityRef<Country>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdInfo", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int IdInfo
		{
			get
			{
				return this._IdInfo;
			}
			set
			{
				if ((this._IdInfo != value))
				{
					this.OnIdInfoChanging(value);
					this.SendPropertyChanging();
					this._IdInfo = value;
					this.SendPropertyChanged("IdInfo");
					this.OnIdInfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IdCountry", DbType="Int NOT NULL")]
		public int IdCountry
		{
			get
			{
				return this._IdCountry;
			}
			set
			{
				if ((this._IdCountry != value))
				{
					if (this._Country.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdCountryChanging(value);
					this.SendPropertyChanging();
					this._IdCountry = value;
					this.SendPropertyChanged("IdCountry");
					this.OnIdCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Info", Storage="_Info1", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Info1
		{
			get
			{
				return this._Info1;
			}
			set
			{
				if ((this._Info1 != value))
				{
					this.OnInfo1Changing(value);
					this.SendPropertyChanging();
					this._Info1 = value;
					this.SendPropertyChanged("Info1");
					this.OnInfo1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IP", DbType="NChar(20) NOT NULL", CanBeNull=false)]
		public string IP
		{
			get
			{
				return this._IP;
			}
			set
			{
				if ((this._IP != value))
				{
					this.OnIPChanging(value);
					this.SendPropertyChanging();
					this._IP = value;
					this.SendPropertyChanged("IP");
					this.OnIPChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NChar(40) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Country_Info", Storage="_Country", ThisKey="IdCountry", OtherKey="IdCountry", IsForeignKey=true)]
		public Country Country
		{
			get
			{
				return this._Country.Entity;
			}
			set
			{
				Country previousValue = this._Country.Entity;
				if (((previousValue != value) 
							|| (this._Country.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Country.Entity = null;
						previousValue.Infos.Remove(this);
					}
					this._Country.Entity = value;
					if ((value != null))
					{
						value.Infos.Add(this);
						this._IdCountry = value.IdCountry;
					}
					else
					{
						this._IdCountry = default(int);
					}
					this.SendPropertyChanged("Country");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
